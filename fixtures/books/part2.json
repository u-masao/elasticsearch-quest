{
  "loadmap": [
    {
      "chapter_id": 1,
      "title": "基本的なクエリ構文とキーワード検索",
      "learning_points": [
        "Elasticsearchクエリの基本構造を理解する",
        "matchクエリによる単語検索",
        "termクエリによる完全一致検索（keywordフィールド）",
        "シンプルな検索結果の取得"
      ]
    },
    {
      "chapter_id": 2,
      "title": "多様なテキスト検索",
      "learning_points": [
        "match_phraseクエリによるフレーズ検索",
        "prefixクエリによる前方一致検索",
        "wildcardクエリの使い方と注意点",
        "existsクエリによるフィールド存在確認"
      ]
    },
    {
      "chapter_id": 3,
      "title": "範囲指定とブール論理",
      "learning_points": [
        "rangeクエリによる数値・日付範囲検索",
        "boolクエリの基本（must, filter, should, must_not）",
        "複数条件を組み合わせた検索",
        "スコアリング有無の理解（must vs filter）"
      ]
    },
    {
      "chapter_id": 4,
      "title": "ベクトル検索とハイブリッド検索",
      "learning_points": [
        "dense_vectorフィールドと類似度計算",
        "knn検索の基本構文とパラメータ",
        "scriptクエリによるベクトル要素へのアクセス",
        "knn検索とフィルタリングの組み合わせ（ハイブリッド検索）"
      ]
    }
  ],
  "mappings": {
    "properties": {
      "author": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "isbn": {
        "type": "keyword"
      },
      "metric_vector": {
        "type": "dense_vector",
        "dims": 2,
        "index": true,
        "similarity": "l2_norm",
        "index_options": {
          "type": "hnsw",
          "m": 16,
          "ef_construction": 100
        }
      },
      "name": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "pages": {
        "type": "integer"
      },
      "publisher": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "publication_date": {
        "type": "date",
        "format": "yyyy-MM-dd"
      }
    }
  },
  "sample_data": [
    {
      "name": "統計学入門 (基礎統計学Ⅰ)",
      "author": "東京大学教養学部統計学教室 (編)",
      "publisher": "東京大学出版会",
      "isbn": "978-4130420655",
      "pages": 304,
      "metric_vector": [
        3,
        8
      ],
      "publication_date": "1991-07-10"
    },
    {
      "name": "効果検証入門〜正しい比較のための因果推論／計量経済学の基礎",
      "author": "安井 翔太, 株式会社ホクソエム",
      "publisher": "技術評論社",
      "isbn": "978-4297108328",
      "pages": 312,
      "metric_vector": [
        6,
        7
      ],
      "publication_date": "2020-03-17"
    },
    {
      "name": "Pythonによるあたらしいデータ分析の教科書",
      "author": "寺田 学, 辻 真吾, 鈴木 たかのり, 福島 真太朗",
      "publisher": "翔泳社",
      "isbn": "978-4798169307",
      "pages": 432,
      "metric_vector": [
        8,
        4
      ],
      "publication_date": "2021-11-19"
    },
    {
      "name": "データサイエンスのための統計学入門",
      "author": "Peter Bruce, Andrew Bruce, Peter Gedeck (著), 黒川 利明 (訳)",
      "publisher": "オライリー・ジャパン",
      "isbn": "978-4873119208",
      "pages": 424,
      "metric_vector": [
        6,
        6
      ],
      "publication_date": "2021-09-17"
    },
    {
      "name": "Pythonではじめる機械学習 ―scikit-learn、scipy、numpy、pandas、matplotlibを使ったデータ分析",
      "author": "Andreas C. Müller, Sarah Guido (著), 中田 秀基 (訳)",
      "publisher": "オライリー・ジャパン",
      "isbn": "978-4873117983",
      "pages": 400,
      "metric_vector": [
        8,
        5
      ],
      "publication_date": "2017-09-14"
    },
    {
      "name": "ゼロから作るDeep Learning ―Pythonで学ぶディープラーニングの理論と実装",
      "author": "斎藤 康毅",
      "publisher": "オライリー・ジャパン",
      "isbn": "978-4873117587",
      "pages": 304,
      "metric_vector": [
        8,
        6
      ],
      "publication_date": "2016-09-24"
    },
    {
      "name": "ゼロから作るDeep Learning ❷ ―自然言語処理編",
      "author": "斎藤 康毅",
      "publisher": "オライリー・ジャパン",
      "isbn": "978-4873118362",
      "pages": 432,
      "metric_vector": [
        8,
        7
      ],
      "publication_date": "2018-07-21"
    },
    {
      "name": "ゼロから作るDeep Learning ❸ ―フレームワーク編",
      "author": "斎藤 康毅",
      "publisher": "オライリー・ジャパン",
      "isbn": "978-4873119062",
      "pages": 600,
      "metric_vector": [
        9,
        7
      ],
      "publication_date": "2020-07-17"
    },
    {
      "name": "仕事ではじめる機械学習 第2版",
      "author": "有賀 友紀, 中山 心太, 西田 貴紀, 他",
      "publisher": "オライリー・ジャパン",
      "isbn": "978-4873118218",
      "pages": 272,
      "metric_vector": [
        7,
        4
      ],
      "publication_date": "2018-04-21"
    },
    {
      "name": "前処理大全［データ分析のためのSQL/Python/R実践テクニック］",
      "author": "本橋 智光",
      "publisher": "技術評論社",
      "isbn": "978-4297130350",
      "pages": 704,
      "metric_vector": [
        9,
        1
      ],
      "publication_date": "2022-09-15"
    },
    {
      "name": "データ分析のためのSQL入門",
      "author": "NTTコム オンライン・マーケティング・ソリューション株式会社",
      "publisher": "ソシム",
      "isbn": "978-4802613353",
      "pages": 256,
      "metric_vector": [
        9,
        1
      ],
      "publication_date": "2021-12-20"
    },
    {
      "name": "機械学習のエッセンス -実装しながら学ぶPython,数学,アルゴリズム-",
      "author": "加藤 公一",
      "publisher": "SBクリエイティブ",
      "isbn": "978-4797398236",
      "pages": 352,
      "metric_vector": [
        7,
        7
      ],
      "publication_date": "2018-09-18"
    },
    {
      "name": "Python機械学習プログラミング 達人データサイエンティストによる理論と実践 第4版",
      "author": "Sebastian Raschka, Vahid Mirjalili (著), 株式会社クイープ (訳)",
      "publisher": "インプレス",
      "isbn": "978-4295015241",
      "pages": 768,
      "metric_vector": [
        8,
        6
      ],
      "publication_date": "2023-01-19"
    },
    {
      "name": "統計的学習の基礎 ―データマイニング・推論・予測―",
      "author": "Trevor Hastie, Robert Tibshirani, Jerome Friedman (著), 杉山 将, 井手 剛, 神嶌 敏弘, 栗田 多喜夫, 前田 英作, 井尻 善久, 岩田 具治, 金森 敬文, 兼村 厚範, 烏山 昌幸, 小西 嘉一郎, 酒井 昭宏, 清水 伸幸, 瀬々 潤, 竹内 一郎, 竹内 純一, 田中 譲, 出口 大輔, 中島 伸夫, 林 浩平, 藤巻 遼平, 前田 新一, 持橋 大地, 森長 誠, 山田 誠二, 吉田 亮 (訳)",
      "publisher": "共立出版",
      "isbn": "978-4320123625",
      "pages": 788,
      "metric_vector": [
        5,
        9
      ],
      "publication_date": "2014-06-25"
    },
    {
      "name": "パターン認識と機械学習 上",
      "author": "C.M. ビショップ (著), 元田 浩, 栗田 多喜夫, 樋口 知之, 松本 裕治, 村田 昇 (監訳)",
      "publisher": "丸善出版",
      "isbn": "978-4621083300",
      "pages": 400,
      "metric_vector": [
        4,
        9
      ],
      "publication_date": "2012-04-25"
    },
    {
      "name": "パターン認識と機械学習 下",
      "author": "C.M. ビショップ (著), 元田 浩, 栗田 多喜夫, 樋口 知之, 松本 裕治, 村田 昇 (監訳)",
      "publisher": "丸善出版",
      "isbn": "978-4621083317",
      "pages": 430,
      "metric_vector": [
        4,
        9
      ],
      "publication_date": "2012-04-25"
    },
    {
      "name": "kaggleで勝つデータ分析の技術",
      "author": "門脇 大輔, 阪田 隆司, 保坂 桂佑, 平松 雄司",
      "publisher": "技術評論社",
      "isbn": "978-4297108434",
      "pages": 512,
      "metric_vector": [
        9,
        5
      ],
      "publication_date": "2019-10-09"
    },
    {
      "name": "実践的データ基盤への処方箋〜データ分析の信頼性とスピードを高めるデータ品質／データガバナンス／データカタログ",
      "author": "ゆずたそ, 伊藤 徹郎, wataru.oyama",
      "publisher": "技術評論社",
      "isbn": "978-4297131883",
      "pages": 464,
      "metric_vector": [
        8,
        2
      ],
      "publication_date": "2022-12-19"
    },
    {
      "name": "AI・データ分析プロジェクトのすべて――ビジネス力×技術力=価値創出",
      "author": "巣籠 悠輔",
      "publisher": "技術評論社",
      "isbn": "978-4297130787",
      "pages": 352,
      "metric_vector": [
        6,
        3
      ],
      "publication_date": "2022-10-19"
    },
    {
      "name": "データ分析力を上げるための8つの必須スキル 実務で使えるデータ分析サイクル構築法",
      "author": "株式会社データミックス",
      "publisher": "翔泳社",
      "isbn": "978-4798169079",
      "pages": 304,
      "metric_vector": [
        7,
        4
      ],
      "publication_date": "2021-10-25"
    }
  ],
  "quests": [
    {
      "quest_id": 1,
      "title": "書籍名検索 (Match)",
      "description": "書籍名 (`name`) に 'Deep Learning' という単語が含まれる本を検索してください。",
      "difficulty": 1,
      "query_type_hint": "match",
      "evaluation_type": "result_count",
      "evaluation_data": "3",
      "hints": "[\"`match` クエリは、指定されたテキストを解析し、一致するドキュメントを検索します。\",\"基本的な構文: `query: { match: { field_name: \\\"search_term\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"match\": {\n      \"name\": \"Deep Learning\"\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 2,
      "title": "出版社検索 (Term)",
      "description": "出版社 (`publisher`) が 'オライリー・ジャパン' である本を検索してください。完全一致で検索するには `.keyword` フィールドを使います。",
      "difficulty": 1,
      "query_type_hint": "term",
      "evaluation_type": "result_count",
      "evaluation_data": "6",
      "hints": "[\"完全一致検索には `term` クエリを使います。\",\"テキストフィールドの完全一致検索では、マッピングで定義された `.keyword` サブフィールドを指定するのが一般的です。\",\"構文: `query: { term: { \\\"publisher.keyword\\\": \\\"オライリー・ジャパン\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"term\": {\n      \"publisher.keyword\": \"オライリー・ジャパン\"\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 3,
      "title": "ページ数検索 (Range)",
      "description": "ページ数 (`pages`) が 500ページ以上 の本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "range",
      "evaluation_type": "result_count",
      "evaluation_data": "5",
      "hints": "[\"数値の範囲を指定するには `range` クエリを使います。\",\"「以上」を指定するには `gte` (Greater Than or Equal to) を使います。\",\"構文: `query: { range: { pages: { \\\"gte\\\": 500 } } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"range\": {\n      \"pages\": {\n        \"gte\": 500\n      }\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 4,
      "title": "複数条件検索 (Bool - Filter)",
      "description": "出版社 (`publisher.keyword`) が '技術評論社' であり、かつページ数 (`pages`) が 400ページ以上 の本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "bool, term, range",
      "evaluation_type": "result_count",
      "evaluation_data": "3",
      "hints": "[\"複数の条件を組み合わせるには `bool` クエリを使います。\",\"すべての条件を満たす必要があり、スコア計算が不要な場合、`filter` 句を使うのが効率的です。\",\"`filter` 句の中に `term` クエリと `range` クエリを配列で入れてみましょう。\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"publisher.keyword\": \"技術評論社\"\n          }\n        },\n        {\n          \"range\": {\n            \"pages\": {\n              \"gte\": 400\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 5,
      "title": "フレーズ検索 (Match Phrase)",
      "description": "書籍名 (`name`) に 'データ 分析' というフレーズ（語順も含めて一致）が含まれる本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "match_phrase",
      "evaluation_type": "result_count",
      "evaluation_data": "8",
      "hints": "[\"単語が連続して出現するフレーズで検索するには `match_phrase` クエリを使います。\",\"構文: `query: { match_phrase: { field_name: \\\"search phrase\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"match_phrase\": {\n      \"name\": \"データ 分析\"\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 6,
      "title": "前方一致検索 (Prefix)",
      "description": "書籍名 (`name`) が 'ゼロから作る' で始まる本を検索してください。前方一致には `prefix` クエリを使います。",
      "difficulty": 2,
      "query_type_hint": "prefix",
      "evaluation_type": "result_count",
      "evaluation_data": "3",
      "hints": "[\"フィールドの値が指定した文字列で始まるドキュメントを検索するには `prefix` クエリを使います。\",\"`text` 型フィールドに対して `prefix` クエリを使うと、トークン化された単語に対して前方一致が適用されます。完全な文字列で前方一致させたい場合は `keyword` 型フィールドを使います。今回は書籍名全体ではなく、タイトル内の単語で始まるものを見つけるため `name` フィールドで検索します。\",\"構文: `query: { prefix: { field_name: \\\"start_string\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"prefix\": {\n      \"name.keyword\": \"ゼロから作る\"\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 7,
      "title": "ワイルドカード検索 (Wildcard)",
      "description": "著者名 (`author`) に '斎藤' で始まり '毅' で終わる名前が含まれる本を検索してください。ワイルドカード `*` を使います。",
      "difficulty": 3,
      "query_type_hint": "wildcard",
      "evaluation_type": "result_count",
      "evaluation_data": "3",
      "hints": "[\"`wildcard` クエリは `*` (任意の文字列) や `?` (任意の一文字) を使ってパターンマッチ検索を行います。\",\"パフォーマンスへの影響が大きいため、`wildcard` の使用は慎重に行うべきです。特に先頭に `*` を使うのは避けましょう。\",\"`text` フィールドに適用するとトークン単位で評価されます。著者名全体で評価したい場合は `author.keyword` を使います。\",\"構文: `query: { wildcard: { \\\"author.keyword\\\": \\\"斎藤*毅\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"wildcard\": {\n      \"author.keyword\": {\n    \"value\": \"斎藤*毅\"}\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 8,
      "title": "出版日検索 (Range - Date)",
      "description": "出版日 (`publication_date`) が 2020年1月1日 から 2021年12月31日 まで の本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "range",
      "evaluation_type": "result_count",
      "evaluation_data": "6",
      "hints": "[\"日付フィールドに対しても `range` クエリを使用できます。\",\"日付のフォーマットはマッピング (`yyyy-MM-dd`) に合わせる必要があります。\",\"範囲の開始を `gte` (以上)、終了を `lte` (以下) で指定します。\",\"構文: `query: { range: { publication_date: { \\\"gte\\\": \\\"2020-01-01\\\", \\\"lte\\\": \\\"2021-12-31\\\" } } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"range\": {\n      \"publication_date\": {\n        \"gte\": \"2020-01-01\",\n        \"lte\": \"2021-12-31\"\n      }\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 9,
      "title": "フィールド存在確認 (Exists)",
      "description": "ISBN (`isbn`) が登録されている（フィールドが存在する）本をすべて検索してください。",
      "difficulty": 1,
      "query_type_hint": "exists",
      "evaluation_type": "result_count",
      "evaluation_data": "20",
      "hints": "[\"指定したフィールドに値が存在する（nullでない）ドキュメントを検索するには `exists` クエリを使います。\",\"構文: `query: { exists: { field: \\\"field_name\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"exists\": {\n      \"field\": \"isbn\"\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 10,
      "title": "除外検索 (Bool - Must Not)",
      "description": "出版社 (`publisher.keyword`) が 'オライリー・ジャパン' ではない 本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "bool, term",
      "evaluation_type": "result_count",
      "evaluation_data": "14",
      "hints": "[\"特定の条件に一致するドキュメントを除外するには `bool` クエリの `must_not` 句を使います。\",\"`must_not` の中に除外したい条件（この場合は `term` クエリ）を記述します。\",\"構文: `query: { bool: { must_not: [ { term: { ... } } ] } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"must_not\": [\n        {\n          \"term\": {\n            \"publisher.keyword\": \"オライリー・ジャパン\"\n          }\n        }\n      ]\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 11,
      "title": "いずれか一致検索 (Bool - Should)",
      "description": "書籍名 (`name`) に 'Python' または 'SQL' のいずれかの単語が含まれる本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "bool, match",
      "evaluation_type": "result_count",
      "evaluation_data": "7",
      "hints": "[\"複数の条件のうち、少なくとも1つに一致するドキュメントを検索するには `bool` クエリの `should` 句を使います。\",\"`should` 句の中に `match` クエリを2つ入れてみましょう。\",\"デフォルトでは `should` の条件に1つでも一致すればヒットしますが、`minimum_should_match` パラメータで最低限一致すべき条件数を指定することもできます。今回は不要です。\",\"構文: `query: { bool: { should: [ { match: { ... } }, { match: { ... } } ] } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"match\": {\n            \"name\": \"Python\"\n          }\n        },\n        {\n          \"match\": {\n            \"name\": \"SQL\"\n          }\n        }\n      ],\n      \"minimum_should_match\": 1\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 12,
      "title": "必須条件と任意条件 (Bool - Must & Should)",
      "description": "出版社 (`publisher.keyword`) が 'オライリー・ジャパン' であり、かつ書籍名 (`name`) に 'Python' または 'Deep Learning' のいずれかを含む本を検索してください。",
      "difficulty": 3,
      "query_type_hint": "bool, term, match",
      "evaluation_type": "result_count",
      "evaluation_data": "4",
      "hints": "[\"`bool` クエリ内で `must` (または `filter`) と `should` を組み合わせることができます。\",\"`filter` 句で出版社を絞り込み、`should` 句で書籍名の条件を指定します。`should` 内の条件は少なくとも1つ満たす必要があります。\",\"`filter` と `should` を同じ `bool` クエリ内に記述します。\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"publisher.keyword\": \"オライリー・ジャパン\"\n          }\n        }\n      ],\n      \"should\": [\n        {\n          \"match\": {\n            \"name\": \"Python\"\n          }\n        },\n        {\n          \"match\": {\n            \"name\": \"Deep Learning\"\n          }\n        }\n      ],\n      \"minimum_should_match\": 1\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 13,
      "title": "最近出版された技術書 (Bool - Filter & Range)",
      "description": "出版日 (`publication_date`) が 2022年1月1日以降 で、かつページ数 (`pages`) が 300ページ以上 の本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "bool, range",
      "evaluation_type": "result_count",
      "evaluation_data": "4",
      "hints": "[\"複数の `range` 条件を組み合わせるには `bool` クエリの `filter` 句が適しています。\",\"`filter` 句の中に、出版日 (`publication_date`) とページ数 (`pages`) それぞれに対する `range` クエリを記述します。\",\"日付の範囲指定には `gte` を、ページ数の範囲指定にも `gte` を使います。\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"publication_date\": {\n              \"gte\": \"2022-01-01\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"pages\": {\n              \"gte\": 300\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 14,
      "title": "著者名完全一致 (Keyword Term)",
      "description": "著者名 (`author.keyword`) が '斎藤 康毅' である本を検索してください。",
      "difficulty": 1,
      "query_type_hint": "term",
      "evaluation_type": "result_count",
      "evaluation_data": "3",
      "hints": "[\"著者名のように、完全に一致する名前で検索したい場合は、マッピングで定義された `.keyword` フィールドに対して `term` クエリを使用します。\",\"構文: `query: { term: { \\\"author.keyword\\\": \\\"斎藤 康毅\\\" } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"term\": {\n      \"author.keyword\": \"斎藤 康毅\"\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 15,
      "title": "複数出版社検索 (Terms)",
      "description": "出版社 (`publisher.keyword`) が '技術評論社' または '翔泳社' である本を検索してください。",
      "difficulty": 2,
      "query_type_hint": "terms",
      "evaluation_type": "result_count",
      "evaluation_data": "7",
      "hints": "[\"一つのフィールドに対して複数の値を指定し、いずれかに一致するものを検索するには `terms` クエリを使います。\",\"検索したい値のリストを配列で指定します。\",\"構文: `query: { terms: { \\\"publisher.keyword\\\": [ \\\"技術評論社\\\", \\\"翔泳社\\\" ] } }`\"]",
      "correct_query": "{\n  \"query\": {\n    \"terms\": {\n      \"publisher.keyword\": [\n        \"技術評論社\",\n        \"翔泳社\"\n      ]\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 16,
      "title": "ベクトル要素アクセス (Script)",
      "description": "Technical score (`metric_vector[0]`) が 8 以上で、かつ Mathematical score (`metric_vector[1]`) が 6 以上 の本を検索してください。ベクトル要素へのアクセスには `script` クエリを使います。",
      "difficulty": 3,
      "query_type_hint": "bool, script",
      "evaluation_type": "result_count",
      "evaluation_data": "4",
      "hints": "[\"`script` クエリを使うと、ドキュメントのフィールド値に基づいてカスタム条件でフィルタリングできます。\",\"`bool` クエリの `filter` 句の中で `script` クエリを2つ使い、それぞれの条件を記述します。\",\"スクリプト内でのベクトル要素へのアクセスは `doc['metric_vector'][0]` や `doc['metric_vector'].value[0]` のように行います（Elasticsearchのバージョンや設定によります）。Painless言語のドキュメントも参考にしましょう。\",\"構文例（要素アクセス）: `doc['metric_vector'].size() > 0 && doc['metric_vector'][0] >= 8`\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"script\": {\n            \"script\": {\n              \"source\": \"doc['metric_vector'].size() > 0 && doc['metric_vector'].vectorValue[0] >= params.tech_score\",\n              \"params\": {\n                \"tech_score\": 8\n              }\n            }\n          }\n        },\n        {\n          \"script\": {\n            \"script\": {\n              \"source\": \"doc['metric_vector'].size() > 1 && doc['metric_vector'].vectorValue[1] >= params.math_score\",\n              \"params\": {\n                \"math_score\": 6\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 17,
      "title": "ベクトル類似検索 (kNN)",
      "description": "`metric_vector` フィールドに対してベクトル `[9, 1]` (Technical寄り) にベクトル空間上で最も近い本を上位3件検索してください。Elasticsearch 8.x以降の `knn` オプションを使います。(L2距離)",
      "difficulty": 3,
      "query_type_hint": "knn",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"10\",\"11\",\"18\"]",
      "hints": "[\"`knn` 検索は、クエリベクトルに最も近いベクトルを持つドキュメントを効率的に検索します。マッピングで `dense_vector` フィールドの `index: true` が必要です。\",\"クエリのトップレベルに `knn` オプションを指定します。`field`, `query_vector`, `k`, `num_candidates` が主要なパラメータです。\",\"`query_vector` に `[9, 1]` を、`k` に取得したい件数(3)、`num_candidates` に `k` より大きい値(例: 10)を指定します。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [\n      9,\n      1\n    ],\n    \"k\": 3,\n    \"num_candidates\": 10\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 18,
      "title": "ベクトル類似検索 + 出版日フィルタ (kNN + PreFilter)",
      "description": "ベクトル `[5, 5]` (バランス型) にベクトル空間上で近く、かつ出版日 (`publication_date`) が 2019年1月1日以降 の本を上位3件検索してください。出版日によりフィルタされたアイテムに対して、ベクトル検索で上位を抽出するクエリを作成してください。",
      "difficulty": 4,
      "query_type_hint": "knn, filter, range",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"4\", \"2\", \"19\"]",
      "hints": "[\"`knn` 検索とフィルター条件を組み合わせることで、ハイブリッド検索が可能です。\",\"`knn` オプション内に `filter` 句を追加し、その中に通常のクエリ（この場合は `range` クエリ）を記述します。\",\"`filter` は kNN 検索が実行される *前* に適用され、検索対象を絞り込みます。\",\"`knn` オプションと `filter` を正しくネストさせましょう。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [\n      5,\n      5\n    ],\n    \"k\": 3,\n    \"num_candidates\": 10,\n    \"filter\": {\n      \"range\": {\n        \"publication_date\": {\n          \"gte\": \"2019-01-01\"\n        }\n      }\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 19,
      "title": "ベクトル類似検索 + 出版社フィルタ (kNN + PreFilter)",
      "description": "ベクトル `[8, 8]` (両方高め) にベクトル空間上で近く、かつ出版社 (`publisher.keyword`) が 'オライリー・ジャパン' である本を上位3件検索してください。",
      "difficulty": 4,
      "query_type_hint": "knn, filter, term",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"7\", \"8\", \"6\"]",
      "hints": "[\"前のクエストと同様に `knn` 検索とフィルタリングを組み合わせます。\",\"`knn` オプション内の `filter` 句に、出版社を特定するための `term` クエリを記述します。\",\"`filter` により、まず 'オライリー・ジャパン' の本に絞り込み、その中でベクトルが `[8, 8]` に最も近いものが検索されます。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [\n      8,\n      8\n    ],\n    \"k\": 3,\n    \"num_candidates\": 10,\n    \"filter\": {\n      \"term\": {\n        \"publisher.keyword\": \"オライリー・ジャパン\"\n      }\n    }\n  }\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 20,
      "title": "テキスト検索 + ベクトル類似検索 + フィルタ (Query + kNN)",
      "description": "書籍名 (`name`) に '機械学習' を含み、かつベクトル `[7, 7]` に近い本を検索します。ただし、出版日(`publication_date`) は 2018年1月1日以降 のものに限定し、kNN検索で上位10件を取得します。kNN 検索のスコアを2.0倍、テキスト検索のスコアを0.5倍として合算して上位3件を出力してください。",
      "difficulty": 5,
      "query_type_hint": "query, knn, bool, match, range",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"12\", \"13\", \"9\"]",
      "hints": "[\"テキスト検索 (`match`) と kNN検索 (`knn`) を組み合わせる場合、`bool` クエリで両方を記述します。Elasticsearchは両方のスコアを組み合わせて最終的なランキングを決定します（Reciprocal Rank Fusion）。\",\"`query` 部分には `bool` クエリを使い、`must` 句に `match` クエリ（'機械学習'）を指定します。\",\"`knn` 部分は通常通り `field`, `query_vector`, `k`, `num_candidates`, `filter` を指定します。この `k` は kNN として考慮される上位件数であり、最終結果の件数とは異なります。十分な数を指定しましょう。`filter` 句には `range` クエリ（出版日）を指定します。`knn` 部分に設定することで Pre-Filter 扱いとなるため、`match` でフィルタリングされる割合が下がります。\",\"`size` パラメータで最終的に取得するドキュメント数を指定します (例: 3)。\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"name\": {\n              \"query\": \"機械学習\",\n              \"boost\": 0.5\n            }\n          }\n        },\n        {\n          \"knn\": {\n            \"field\": \"metric_vector\",\n            \"query_vector\": [\n              7,\n              7\n            ],\n            \"k\": 10,\n            \"boost\": 2.0,\n            \"filter\": {\n              \"range\": {\n                \"publication_date\": {\n                  \"gte\": \"2018-01-01\"\n                }\n              }\n            }\n          }\n        }\n      ]\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-04 17:46:25",
      "updated_at": "2025-05-04 17:46:25"
    },
    {
      "quest_id": 21,
      "title": "kNN基本: 特定ベクトルへの完全一致",
      "description": "`metric_vector` フィールドに対してベクトル `[3, 8]` に最も近い本を1件検索してください。このベクトルは『統計学入門 (基礎統計学Ⅰ)』のものです。",
      "difficulty": 3,
      "query_type_hint": "knn",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"1\"]",
      "hints": "[\"kNN検索の基本構文を使います。\",\"`query_vector` に `[3, 8]` を、`k` に 1 を指定します。`num_candidates` は `k` 以上で、例えば10を指定します。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [3, 8],\n    \"k\": 1,\n    \"num_candidates\": 10\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 22,
      "title": "kNN基本: 上位5件検索",
      "description": "`metric_vector` フィールドに対してベクトル `[7, 5]` に近い本を上位5件検索してください。`k=5`, `num_candidates=10` とします。",
      "difficulty": 3,
      "query_type_hint": "knn",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"5\", \"3\", \"9\", \"20\", \"4\"]",
      "hints": "[\"kNN検索で `k` パラメータは取得する近傍点の数を指定します。\",\"`num_candidates` はHNSWアルゴリズムが内部的に探索する候補数を指定し、`k` 以上の値を設定します。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [7, 5],\n    \"k\": 5,\n    \"num_candidates\": 10\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 23,
      "title": "kNN基本: 異なるベクトルでの検索",
      "description": "`metric_vector` フィールドに対してベクトル `[1, 1]` (サンプルデータには類似度が低いベクトル) に最も近い本を3件検索してください。",
      "difficulty": 3,
      "query_type_hint": "knn",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"19\", \"1\", \"18\"]",
      "hints": "[\"クエリベクトルを変更すると、異なる類似性の結果が得られます。\",\"L2距離の場合、各要素の差の二乗和の平方根が最小となるものが選択されます。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [1, 1],\n    \"k\": 3,\n    \"num_candidates\": 10\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 24,
      "title": "プレフィルタリング: 出版社指定kNN",
      "description": "出版社 (`publisher.keyword`) が '技術評論社' である書籍の中で、ベクトル `[9, 2]` に最も近い本を上位2件検索してください。",
      "difficulty": 4,
      "query_type_hint": "knn, filter, term",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"10\", \"18\"]",
      "hints": "[\"`knn` オプション内に `filter` 句を追加し、`term` クエリで出版社をフィルタリングします。\",\"プレフィルタリングはkNN検索の対象ドキュメントを事前に絞り込みます。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [9, 2],\n    \"k\": 2,\n    \"num_candidates\": 10,\n    \"filter\": {\n      \"term\": {\n        \"publisher.keyword\": \"技術評論社\"\n      }\n    }\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 25,
      "title": "プレフィルタリング: ページ数指定kNN",
      "description": "ページ数 (`pages`) が400ページ以上の書籍の中で、ベクトル `[8, 7]` に最も近い本を上位2件検索してください。",
      "difficulty": 4,
      "query_type_hint": "knn, filter, range",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"7\", \"8\"]",
      "hints": "[\"`knn` オプション内の `filter` 句に `range` クエリを用いてページ数をフィルタリングします。\",\"`gte` を使って400ページ以上を指定します。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [8, 7],\n    \"k\": 2,\n    \"num_candidates\": 10,\n    \"filter\": {\n      \"range\": {\n        \"pages\": {\n          \"gte\": 400\n        }\n      }\n    }\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 26,
      "title": "プレフィルタリング: 複合条件kNN",
      "description": "出版日が2020年以降で、かつ著者 (`author.keyword`) が '斎藤 康毅' である書籍の中で、ベクトル `[9, 6]` に最も近い本を1件検索してください。",
      "difficulty": 4,
      "query_type_hint": "knn, filter, bool, range, term",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"8\"]",
      "hints": "[\"`knn` の `filter` 句内で `bool` クエリを使い、複数の条件 (`range` と `term`) を組み合わせます。\",\"すべてのフィルタ条件を満たすドキュメントがkNN検索の対象となります。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [9, 6],\n    \"k\": 1,\n    \"num_candidates\": 10,\n    \"filter\": {\n      \"bool\": {\n        \"must\": [\n          {\n            \"range\": {\n              \"publication_date\": {\n                \"gte\": \"2020-01-01\"\n              }\n            }\n          },\n          {\n            \"term\": {\n              \"author.keyword\": \"斎藤 康毅\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 27,
      "title": "ハイブリッド検索: テキスト検索とkNNの組み合わせ",
      "description": "書籍名 (`name`) に 'Python' を含む書籍を検索しつつ、ベクトル `[8, 5]` との類似度も考慮して上位3件を検索してください。`match`クエリの`boost`を0.3, `knn`クエリの`boost`を0.7とします。",
      "difficulty": 4,
      "query_type_hint": "query, knn, bool, match",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"5\", \"13\", \"3\"]",
      "hints": "[\"トップレベルの `query` と `knn` を組み合わせることで、ElasticsearchがReciprocal Rank Fusion (RRF) を使ってスコアを統合します。\",\"`bool` クエリの `should` 句に `match` クエリと `knn` クエリをそれぞれ記述し、`boost` で重み付けします。`size` で最終的な件数を指定します。 Elasticsearch 8.x では、`query` と `knn` を並列に指定する方が一般的です。今回は `bool` の `must` に `match` と `knn` を入れます。\", \"Quest 20 と同様の構造で、`knn` に `filter` がないパターンです。\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"name\": {\n              \"query\": \"Python\",\n              \"boost\": 0.3\n            }\n          }\n        }\n      ]\n    }\n  },\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [8, 5],\n    \"k\": 5, \n    \"num_candidates\": 10,\n    \"boost\": 0.7\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 28,
      "title": "ポストフィルタリング風: kNN結果への追加フィルタ",
      "description": "ベクトル `[8,6]` にkNNで近い上位5件の書籍の中から、ページ数 (`pages`) が300ページ以上のものを検索し、最終的にkNNスコア順で上位3件表示してください。",
      "difficulty": 4,
      "query_type_hint": "query, knn, bool, range",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"6\", \"13\", \"7\"]",
      "hints": "[\"`knn` 検索と `query` によるフィルタリングを組み合わせます。`knn` で大まかな候補セットを取得し、`query` でさらに絞り込みます。\",\"`knn` はトップレベルに配置し、`query` で `range` によるページ数フィルタを適用します。最終的な結果はkNNスコアとフィルタ条件の両方を満たすものとなります。\",\"`size` で最終件数を指定します。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [8, 6],\n    \"k\": 5,\n    \"num_candidates\": 10\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"pages\": {\n              \"gte\": 300\n            }\n          }\n        }\n      ]\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 29,
      "title": "Script Score: ベクトル要素によるスコア調整",
      "description": "書籍名 (`name`) に 'データ' を含む書籍について、Technical score (`metric_vector[0]`) が高いほどスコアが上がるように `script_score` で調整して上位3件を検索してください。",
      "difficulty": 4,
      "query_type_hint": "query, script_score, match",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"10\", \"17\", \"11\"]",
      "hints": "[\"`query` で `match` クエリを実行し、その結果に対して `script_score` を使ってスコアをカスタマイズします。\",\"スクリプト内で `doc['metric_vector'].vectorValue[0]` のようにベクトル要素にアクセスし、スコア計算に利用します。元のスコア `_score` と組み合わせることができます。例: `_score * doc['metric_vector'].vectorValue[0]`\"]",
      "correct_query": "{\n  \"query\": {\n    \"script_score\": {\n      \"query\": {\n        \"match\": {\n          \"name\": \"データ\"\n        }\n      },\n      \"script\": {\n        \"source\": \"_score * (doc['metric_vector'].size() > 0 ? doc['metric_vector'].vectorValue[0] : 1.0)\"\n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 30,
      "title": "Script Score: ベクトルノルムによるソート",
      "description": "全ての書籍に対し、`metric_vector` のL2ノルム（原点からの距離）が小さい順に上位3件を `script_score` を使って検索してください (スコアが低いものが上位に来るように調整)。",
      "difficulty": 4,
      "query_type_hint": "query, script_score, match_all",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"19\", \"20\", \"9\"]",
      "hints": "[\"`match_all` クエリで全ドキュメントを対象とし、`script_score` でL2ノルムを計算します。\",\"スクリプトで `sqrt(v[0]^2 + v[1]^2)` を計算し、この値が小さいほどスコアが高くなるように `1.0 / (1.0 + norm)` のように調整します。Painlessでは `Math.sqrt` や `Math.pow` が使えます。 \"]",
      "correct_query": "{\n  \"query\": {\n    \"script_score\": {\n      \"query\": { \"match_all\": {} },\n      \"script\": {\n        \"source\": \"double norm = 0; if (doc['metric_vector'].size() == 2) { double v0 = doc['metric_vector'].vectorValue[0]; double v1 = doc['metric_vector'].vectorValue[1]; norm = Math.sqrt(Math.pow(v0, 2) + Math.pow(v1, 2)); } return 1.0 / (1.0 + norm); \"\n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 31,
      "title": "Script Score: kNNスコアと他要素の組み合わせ",
      "description": "kNN検索で `[6,6]` に近い上位5件の書籍に対して、出版日が新しいほどスコアが高くなるように `script_score` で元のkNNスコアと組み合わせて調整し、最終的に上位3件を表示してください。",
      "difficulty": 5,
      "query_type_hint": "query, knn, script_score",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"4\", \"2\", \"12\"]",
      "hints": "[\"`knn`検索を `bool` クエリの `should`句や `must`句に含め、そのクエリ全体を `script_score` の `query` 部分にネストします。\",\"スクリプト内で `_score` (kNNのスコアを含む) と `doc['publication_date'].value.toEpochMilli()` のような日付情報を組み合わせて新しいスコアを計算します。最新の日付ほど高い値になるようにします。\"]",
      "correct_query": "{\n  \"query\": {\n    \"script_score\": {\n      \"query\": {\n        \"knn\": {\n          \"field\": \"metric_vector\",\n          \"query_vector\": [6,6],\n          \"k\": 5,\n          \"num_candidates\": 10\n        }\n      },\n      \"script\": {\n        \"source\": \"_score + (doc['publication_date'].value.toEpochMilli() / (1000.0 * 3600 * 24 * 365 * 10))\" \n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 32,
      "title": "Rescore: テキスト検索結果のベクトル類似度リランキング",
      "description": "書籍名 (`name`) に '入門' を含む書籍をまず50件取得し (window_size)、その結果セットに対して `script_score` を用いて `metric_vector` が `[5,5]` にL2距離で近い順に上位3件をリランキングしてください。",
      "difficulty": 5,
      "query_type_hint": "query, rescore, match, script_score",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"4\", \"2\", \"19\"]",
      "hints": "[\"最初の `query` (match) で候補セットを取得し、`rescore` でその結果を並べ替えます。\",\"`rescore` の `query` 部分に `script_score` を指定し、スクリプト内でクエリベクトル `[5,5]` とのL2距離を計算し、距離が小さいほどスコアが高くなるようにします。例: `1.0 / (1.0 + distance)`。\"]",
      "correct_query": "{\n  \"query\": {\n    \"match\": {\n      \"name\": \"入門\"\n    }\n  },\n  \"rescore\": {\n    \"window_size\": 50,\n    \"query\": {\n      \"rescore_query\": {\n        \"script_score\": {\n          \"query\": { \"match_all\": {} }, \n          \"script\": {\n            \"source\": \"double dist = 0; if (doc['metric_vector'].size() == 2) { double v0 = doc['metric_vector'].vectorValue[0] - params.qv[0]; double v1 = doc['metric_vector'].vectorValue[1] - params.qv[1]; dist = Math.sqrt(Math.pow(v0, 2) + Math.pow(v1, 2)); } return 1.0 / (1.0 + dist);\",\n            \"params\": { \"qv\": [5,5] }\n          }\n        }\n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 33,
      "title": "Rescore: ソート結果のカスタムスコアリランキング",
      "description": "全ての書籍をページ数が多い順にソートして上位20件を取得し、その結果セットを `script_score` を使って `metric_vector[0] * 0.7 + metric_vector[1] * 0.3` の値が大きい順に上位3件リランキングしてください。",
      "difficulty": 5,
      "query_type_hint": "query, rescore, match_all, sort, script_score",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"13\", \"10\", \"14\"]",
      "hints": "[\"最初の `query` (match_all) と `sort` で候補セットを取得します。\",\"`rescore` の `query` 部分に `script_score` を指定し、スクリプト内で指定された計算式 (`v[0]*0.7 + v[1]*0.3`) でスコアを付け直します。\"]",
      "correct_query": "{\n  \"query\": { \"match_all\": {} },\n  \"sort\": [ { \"pages\": \"desc\" } ],\n  \"rescore\": {\n    \"window_size\": 20,\n    \"query\": {\n      \"rescore_query\": {\n        \"script_score\": {\n          \"query\": { \"match_all\": {} },\n          \"script\": {\n            \"source\": \"if (doc['metric_vector'].size() == 2) { return doc['metric_vector'].vectorValue[0] * 0.7 + doc['metric_vector'].vectorValue[1] * 0.3; } else { return 0; }\"\n          }\n        }\n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 34,
      "title": "Script Score: Dot Product類似度検索",
      "description": "`metric_vector` で `[4, 9]` (数学寄り) に `dot_product` 類似度（内積）で最も近い書籍を3件検索してください。`script_score` を使って内積を計算します。",
      "difficulty": 4,
      "query_type_hint": "query, script_score, match_all",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"14\", \"8\", \"15\"]",
      "hints": "[\"`match_all` クエリで全ドキュメントを対象とし、`script_score` で内積 (`v[0]*q[0] + v[1]*q[1]`) を計算します。\",\"クエリベクトル `[4,9]` をスクリプトの `params` で渡します。内積が大きいほど類似度が高いと評価されます。\"]",
      "correct_query": "{\n  \"query\": {\n    \"script_score\": {\n      \"query\": { \"match_all\": {} },\n      \"script\": {\n        \"source\": \"double score = 0; if (doc['metric_vector'].size() == 2) { score += doc['metric_vector'].vectorValue[0] * params.qv[0]; score += doc['metric_vector'].vectorValue[1] * params.qv[1]; } return score;\",\n        \"params\": { \"qv\": [4,9] }\n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 35,
      "title": "プレフィルタリング: 複雑な複合条件kNN",
      "description": "2015年から2019年に出版され、かつ出版社 (`publisher.keyword`) が 'オライリー・ジャパン' または '技術評論社' の書籍の中で、ベクトル `[7,6]` に最も近い本を上位2件検索してください。",
      "difficulty": 4,
      "query_type_hint": "knn, filter, bool, range, terms",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"6\", \"7\"]",
      "hints": "[\"`knn` の `filter` 句内で `bool` クエリを使用します。\",\"出版日の範囲は `range` クエリ、出版社の複数指定は `terms` クエリを使います。これらを `bool` の `must` (または `filter`) にまとめます。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [7,6],\n    \"k\": 2,\n    \"num_candidates\": 10,\n    \"filter\": {\n      \"bool\": {\n        \"must\": [\n          {\n            \"range\": {\n              \"publication_date\": {\n                \"gte\": \"2015-01-01\",\n                \"lte\": \"2019-12-31\"\n              }\n            }\n          },\n          {\n            \"terms\": {\n              \"publisher.keyword\": [\"オライリー・ジャパン\", \"技術評論社\"]\n            }\n          }\n        ]\n      }\n    }\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 36,
      "title": "Script Query: ベクトル要素間の関係性フィルタとソート",
      "description": "`metric_vector` `[tx, mx]` について `tx > mx + 2` となる（Technical scoreがMathematical scoreより2ポイント以上高い）書籍を `script` クエリでフィルタリングし、その中で最もページ数が多い書籍上位3件を検索してください。",
      "difficulty": 4,
      "query_type_hint": "query, bool, script, sort",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"10\", \"17\", \"18\"]",
      "hints": "[\"`bool` クエリの `filter` 句に `script` クエリを使い、指定された条件 (`doc['metric_vector'].vectorValue[0] > doc['metric_vector'].vectorValue[1] + 2`) でフィルタリングします。\",\"その結果を `sort` オプションで `pages` の降順に並べ替えます。\"]",
      "correct_query": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"script\": {\n          \"script\": {\n            \"source\": \"if (doc['metric_vector'].size() == 2) { return doc['metric_vector'].vectorValue[0] > doc['metric_vector'].vectorValue[1] + 2; } return false;\"\n          }\n        }\n      }\n    }\n  },\n  \"sort\": [ { \"pages\": \"desc\" } ],\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 37,
      "title": "ハイブリッド検索: 重み付け調整",
      "description": "書籍名 (`name`) に 'Python' を含む結果 (boost 0.3) と `metric_vector` が `[8,4]` に近い結果 (boost 0.7) を組み合わせて上位3件検索してください。Quest20や27と似ていますが、`knn` の `query_vector` と `boost` 値が異なります。",
      "difficulty": 4,
      "query_type_hint": "query, knn, bool, match",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"3\", \"5\", \"17\"]",
      "hints": "[\"トップレベルの `query` と `knn` を組み合わせ、それぞれの `boost` 値を調整します。\",\"`match` クエリと `knn` クエリの `boost` を指定し、ElasticsearchのRRFによるスコア統合に影響を与えます。\"]",
      "correct_query": "{\n  \"query\": {\n    \"match\": {\n      \"name\": {\n        \"query\": \"Python\",\n        \"boost\": 0.3\n      }\n    }\n  },\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [8,4],\n    \"k\": 5,\n    \"num_candidates\": 10,\n    \"boost\": 0.7\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 38,
      "title": "kNN検索結果の特定フィールド確認",
      "description": "ベクトル `[8,6]` にkNNで最も近い上位3件の書籍のIDを、類似度が高い順に検索してください。",
      "difficulty": 3,
      "query_type_hint": "knn",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"6\", \"13\", \"7\"]",
      "hints": "[\"基本的な `knn` クエリを使用します。\",\"`k=3` とし、`query_vector` に `[8,6]` を指定します。返却されるドキュメントのIDの順序が評価対象です。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [8,6],\n    \"k\": 3,\n    \"num_candidates\": 10\n  }\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 39,
      "title": "Rescore: kNN結果のテキスト条件リランキング",
      "description": "ページ数が300以上の本を対象に、まずkNNでベクトル `[7,7]` に近い順に上位10件を取得します。その10件を、書籍名 (`name`) に \"Python\" を含む場合にスコアを大きく加点 (例: 元のスコアの2倍) する `script_score` でリランキングし、最終的に上位3件を表示してください。",
      "difficulty": 5,
      "query_type_hint": "knn, rescore, script_score, filter, range, match_all",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"13\", \"5\", \"3\"]",
      "hints": "[\"まず `knn` クエリでプレフィルタリング(ページ数)とベクトル検索を行います。この `knn` クエリをメインの `query` として使います。\",\"次に `rescore` を使います。`rescore` の `query` 部分に `script_score` を指定します。スクリプト内で `doc['name'].value.contains('Python')` のような条件でPythonを含むか判定し、含む場合は `_score * 2` (または大きな固定値を加算) のようにスコアを調整します。\"]",
      "correct_query": "{\n  \"query\": {\n    \"knn\": {\n      \"field\": \"metric_vector\",\n      \"query_vector\": [7,7],\n      \"k\": 10,\n      \"num_candidates\": 20,\n      \"filter\": {\n        \"range\": {\n          \"pages\": { \"gte\": 300 }\n        }\n      }\n    }\n  },\n  \"rescore\": {\n    \"window_size\": 10,\n    \"query\": {\n      \"rescore_query\": {\n        \"script_score\": {\n          \"query\": { \"match_all\": {} }, \n          \"script\": {\n            \"source\": \"double new_score = _score; if (doc['name'].value.toLowerCase().contains('python')) { new_score *= 2; } return new_score;\"\n          }\n        }\n      }\n    }\n  },\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    },
    {
      "quest_id": 40,
      "title": "kNN検索結果の別フィールドソート",
      "description": "`metric_vector` で `[6,7]` に近い書籍を kNN で上位10件取得します。これらの書籍を出版日の降順（新しい順）でソートして上位3件表示してください。",
      "difficulty": 4,
      "query_type_hint": "knn, sort",
      "evaluation_type": "doc_ids_in_order",
      "evaluation_data": "[\"13\", \"4\", \"2\"]",
      "hints": "[\"トップレベルに `knn` オプションと `sort` オプションを併用します。\",\"`knn` でまず10件の候補を取得し、その10件に対して `sort` で出版日 (`publication_date`) の降順 (`desc`) に並べ替えます。`size` で最終取得件数を指定します。\"]",
      "correct_query": "{\n  \"knn\": {\n    \"field\": \"metric_vector\",\n    \"query_vector\": [6,7],\n    \"k\": 10,\n    \"num_candidates\": 20\n  },\n  \"sort\": [\n    { \"publication_date\": \"desc\" }\n  ],\n  \"size\": 3\n}",
      "created_at": "2025-05-14 07:00:00",
      "updated_at": "2025-05-14 07:00:00"
    }
  ]
}
